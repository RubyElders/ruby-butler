name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: 1.90.0
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings -A clippy::pedantic -A clippy::nursery
    
    - name: Check documentation
      run: cargo doc --no-deps --document-private-items --all-features

  test-rust:
    name: Rust Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [1.90.0]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.rust }}-cargo-
          ${{ runner.os }}-cargo-
    
    - name: Build
      run: cargo build --verbose
    
    - name: Run unit tests
      run: cargo test --verbose
    
    - name: Run integration tests
      run: cargo test --verbose --test '*'
    
    - name: Build release
      run: cargo build --release

  test-shellspec-linux:
    name: ShellSpec Tests (Linux)
    runs-on: ubuntu-latest
    needs: test-rust
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: 1.90.0
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ubuntu-latest-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build Ruby Butler
      run: cargo build --release
    
    - name: Build Docker test image
      run: make docker
    
    - name: Run ShellSpec tests in Docker
      run: make spec

  test-pester-windows:
    name: Pester Tests (Windows)
    runs-on: windows-latest
    needs: test-rust
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: 1.90.0
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: windows-latest-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build Ruby Butler
      run: cargo build --release
    
    - name: Setup Ruby Butler test installation from RubyInstaller
      run: |
        # Download RubyInstaller 3.4.5
        $DownloadUrl = "https://github.com/oneclick/rubyinstaller2/releases/download/RubyInstaller-3.4.5-1/rubyinstaller-3.4.5-1-x64.7z"
        $ArchivePath = "$env:TEMP\rubyinstaller-3.4.5-1-x64.7z"
        $ExtractPath = "$env:TEMP\ruby-extract"
        
        Write-Host "Downloading Ruby installer from $DownloadUrl"
        Invoke-WebRequest -Uri $DownloadUrl -OutFile $ArchivePath
        
        # Extract using 7z (available on GitHub Actions Windows runners)
        Write-Host "Extracting Ruby installer..."
        & 7z x $ArchivePath -o"$ExtractPath"
        
        # Find the extracted Ruby directory (should be rubyinstaller-3.4.5-1-x64)
        $ExtractedRubyDir = Get-ChildItem "$ExtractPath" -Directory | Where-Object { $_.Name -like "*rubyinstaller*" } | Select-Object -First 1
        
        if (-not $ExtractedRubyDir) {
            throw "Could not find extracted Ruby directory in $ExtractPath"
        }
        
        # Create the Ruby Butler expected directory structure  
        $RubyInstallDir = "$env:USERPROFILE\.rubies\ruby-3.4.5"
        New-Item -ItemType Directory -Path (Split-Path $RubyInstallDir -Parent) -Force
        
        # Copy the entire Ruby installation to the Butler expected location
        Write-Host "Copying Ruby installation from $($ExtractedRubyDir.FullName) to $RubyInstallDir"
        Copy-Item $ExtractedRubyDir.FullName $RubyInstallDir -Recurse -Force
        
        # Verify the setup
        Write-Host "Ruby Butler test installation created:"
        Get-ChildItem "$RubyInstallDir\bin" | Select-Object Name, Length | Format-Table
        
        # Test that key executables exist
        $KeyExecutables = @("ruby.exe", "gem.cmd", "bundle.bat", "irb.bat")
        foreach ($Exe in $KeyExecutables) {
            $ExePath = "$RubyInstallDir\bin\$Exe"
            if (Test-Path $ExePath) {
                Write-Host "✓ Found $Exe"
            } else {
                Write-Warning "✗ Missing $Exe"
            }
        }
      shell: pwsh
    
    - name: Run Pester tests
      run: |
        $env:RB_TEST_PATH = "${{ github.workspace }}\target\release\rb.exe"
        Invoke-Pester tests/ -Output Detailed
      shell: pwsh

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: 1.90.0
    
    - name: Install cargo-audit
      run: cargo install --force cargo-audit
    
    - name: Run security audit
      run: cargo audit

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: 1.90.0
        components: llvm-tools-preview
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: coverage-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install cargo-llvm-cov
      run: cargo install --force cargo-llvm-cov
    
    - name: Generate coverage report
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: lcov.info
        fail_ci_if_error: false